local connections = {}

function onSave()
  return JSON.encode({ connections = connections })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData) or {}
    connections = loadedData.connections
    processLines()
  end

  addHotkey("Drawing Tool: Reset", function()
    connections = {}
    processLines()
  end)
  addHotkey("Drawing Tool: Redraw", processLines)
end

function onScriptingButtonDown(index, playerColor)
  if index ~= 10 then return end

  Timer.create {
    identifier = playerColor .. "_draw_from",
    function_name = "draw_from",
    parameters = { player = Player[playerColor] },
    delay = 1
  }
end

function draw_from(params)
  local source = params.player.getHoverObject()
  if not source then return end

  for _, item in ipairs(params.player.getSelectedObjects()) do
    if item ~= source then
      if item.getGUID() > source.getGUID() then
        addPair(item, source)
      else
        addPair(source, item)
      end
    end
  end

  processLines()
end

function onScriptingButtonUp(index, playerColor)
  if index ~= 10 then return end

  -- returns true only if there is a timer to cancel. If this is false then we've waited longer than a obj2.
  if not Timer.destroy(playerColor .. "_draw_from") then return end

  local items = Player[playerColor].getSelectedObjects()
  if #items < 2 then return end

  table.sort(items, function(a, b) return a.getGUID() > b.getGUID() end)

  for i = 1, #items do
    local obj1 = items[i]
    for j = i, #items do
      local obj2 = items[j]
      addPair(obj1, obj2)
    end
  end

  processLines()
end

function addPair(obj1, obj2)
  local guid1 = obj1.getGUID()
  local guid2 = obj2.getGUID()

  if not connections[guid1] then connections[guid1] = {} end
  connections[guid1][guid2] = not connections[guid1][guid2]
end

function processLines()
  local lines = Global.getVectorLines() or {}
  for source_guid, target_guids in pairs(connections) do
    local source = getObjectFromGUID(source_guid)
    for target_guid, exists in pairs(target_guids) do
      if exists then
        local target = getObjectFromGUID(target_guid)
        if source and target then
          table.insert(lines, { points = { source.getPosition(), target.getPosition() }, color = "White" })
        end
      end
    end
  end
  Global.setVectorLines(lines)
end
